#include <stdlib.h>

#include <string.h>

#include <stdio.h>

#include "lists.h"



/**

 * main - check the code

 *

 * Return: Always 0.

 */

int main(void)

{

	listint_t *head;



	head = NULL;

	add_nodeint_end(&head, 0);

	add_nodeint_end(&head, 1);

	add_nodeint_end(&head, 2);

	add_nodeint_end(&head, 3);

	add_nodeint_end(&head, 4);

	add_nodeint_end(&head, 98);

	add_nodeint_end(&head, 402);

	add_nodeint_end(&head, 1024);

	print_listint(head);

	printf("-----------------\n");

	insert_nodeint_at_index(&head, 5, 4096);

	print_listint(head);

	free_listint2(&head);

	return (0);

}#include "lists.h"

/**
 * insert_nodeint_at_index - insert a new node at a given position
 * @head: pointer to head pointer of linked list
 * @idx: index to insert new node
 * @n: new node's data
 * Return: address of new node, or NULL if failed
 */

listint_t *insert_nodeint_at_index(listint_t **head, unsigned int idx, int n)
{
	unsigned int i = 0;
	listint_t *new_node, *tmp;

	if (head == NULL)

		return (NULL);

	new_node = malloc(sizeof(listint_t));

	if (new_node == NULL)
		return (NULL);

	new_node->n = n;

	if (idx == 0)
	{
		new_node->next = *head;
		*head = new_node;
		return (new_node);
	}

	tmp = *head;
	while (i < (idx - 1))
	{
		tmp = tmp->next;
		i++;

		if (tmp == NULL)
		{
			free(new_node)
			return (NULL);
		}
	}
	new_node->next = tmp->next;
	tmp->next = new_node;
	return (new_node);
}
